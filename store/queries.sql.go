// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package store

import (
	"context"
	"strings"
)

const getNotes = `-- name: GetNotes :many
SELECT steam_id, note, updated_on FROM notes
WHERE steam_id IN (/*SLICE:steam_ids*/?)
`

func (q *Queries) GetNotes(ctx context.Context, steamIds []int64) ([]Note, error) {
	query := getNotes
	var queryParams []interface{}
	if len(steamIds) > 0 {
		for _, v := range steamIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:steam_ids*/?", strings.Repeat(",?", len(steamIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:steam_ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(&i.SteamID, &i.Note, &i.UpdatedOn); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertNote = `-- name: InsertNote :exec
INSERT INTO notes (steam_id, note, updated_on) VALUES (?, ?, ?)
`

type InsertNoteParams struct {
	SteamID   int64
	Note      string
	UpdatedOn int64
}

func (q *Queries) InsertNote(ctx context.Context, arg InsertNoteParams) error {
	_, err := q.db.ExecContext(ctx, insertNote, arg.SteamID, arg.Note, arg.UpdatedOn)
	return err
}

const updateNote = `-- name: UpdateNote :exec
UPDATE notes SET note = ?,  updated_on = ? WHERE steam_id = ?
`

type UpdateNoteParams struct {
	Note      string
	UpdatedOn int64
	SteamID   int64
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) error {
	_, err := q.db.ExecContext(ctx, updateNote, arg.Note, arg.UpdatedOn, arg.SteamID)
	return err
}
